README – Инструкция по использованию парсеров площадок бронирования

1. Общая информация
-------------------
Данный проект предназначен для автоматического сбора данных о доступных слотах для бронирования с нескольких площадок по паделу.

Подключены следующие площадки:
- Padel39
- Padel Club Austin
- The King of Padel
- Upadel

2. Как работает проект
----------------------
Каждая площадка имеет собственный парсер, который обращается к API или парсит сайт для получения информации о свободных слотах.
Результаты сохраняются в базу данных проекта Django.

Парсеры запускаются по расписанию через систему Celery (воркеры).

3. Как запускать парсинг
------------------------
- Парсинг автоматически запускается по расписанию (настройки зависят от сервера).
- Запустить также можно через админку Django, задача называется "parse all sites"
- Также запуск можно выполнить вручную из Django shell командой:
  
  from core.tasks import PARSER_MAPPING
  PARSER_MAPPING["Padel39"]()
  Замените "Padel39" на нужное имя площадки.

4. Где смотреть результаты
--------------------------
- Результаты доступны в административной панели Django в разделе "Слоты" (Slots).
- Для каждой площадки можно видеть дату, время, цену и статус доступности слота.
- В разделе "Площадки бронирования" (Booking Sites) отображаются активные площадки и их параметры.

5. Технические детали (для програмистов)
---------------------
- Парсеры реализованы как классы-наследники BaseParser.
- Для каждого парсера предусмотрена отдельная функция запуска run_once.
- Для авторизации на сторонних сервисах используются токены.
- Форматы времени и данных могут отличаться, предусмотрена обработка ошибок и логирование.
- Celery воркеры выполняют задачи асинхронно, результаты записываются в модель Slot.
- Для добавления новой площадки необходимо:
  - Создать парсер с интерфейсом BaseParser.
  - Добавить функцию запуска в core.tasks.PARSER_MAPPING.
  - Зарегистрировать площадку в модели BookingSite.

6. Требования к окружению
---------------------
Основное:
Python 3.10+
Django 4.x
PostgreSQL (рекомендуется, но можно адаптировать под SQLite/MySQL)
Celery 5.x+
Redis — как брокер сообщений для Celery
pip и virtualenv — для установки зависимостей

Для установки зависимостей выполните в cmd:
pip install -r requirements.txt

7. Как запустить проект
---------------------
Перед запуском убедитесь, что вы установили все зависимости (см. пункт 6), и у вас запущен Redis.
Для полной работы проекта потребуется 3 терминала (можно вкладки в терминале).

Перейдите в директорию проекта (во всех терминалах):
cd your_project_directory/

Терминал №1 — Запуск сервера Django
source venv/bin/activate          # Активация виртуального окружение (если будет ошибка, попробуйте venv\Scripts\activate.bat)
python manage.py makemigration
python manage.py migrate          # Для миграций 
python manage.py runserver

Откроется сайт по адресу http://127.0.0.1:8000/
Админка: http://127.0.0.1:8000/admin/

Терминал №2 — Запуск Celery worker
source venv/bin/activate (venv\Scripts\activate.bat)
celery -A your_project_name worker -l warning (Тут при разработке проекта была использована команада celery -A config worker -l info --pool=solo Если имя проекта изменилось - напишите то имя, если нет - скопируйте эту команду)

Терминал №3 — Запуск Celery beat (если нужна периодичность)
source venv/bin/activate
celery -A your_project_name beat -l warning (celery -A config beat -l warning)

beat запускает задачи по расписанию, например, чтобы парсеры запускались каждые 4 часа.
---


